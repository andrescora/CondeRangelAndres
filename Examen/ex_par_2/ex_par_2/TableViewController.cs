// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using System.Linq;
using LinqToTwitter;
using System.Collections.Generic;
using System.Threading.Tasks;
using ex_par_2.Models;

namespace ex_par_2
{
    public partial class TableViewController : UITableViewController
    {

        #region Variables

        List<Tweet> lstTweets = new List<Tweet>();
        public UISearchController SearchController { get; set; }
        public TableViewController resultadosTbl;

        #endregion

        #region Constructores
        public TableViewController(IntPtr handle) : base(handle)
        {
        }
        #endregion

        #region DidLoad
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            // Perform any additional setup after loading the view, typically from a nib.

            SearchController = new UISearchController(resultadosTbl){
                WeakDelegate = this,
                DimsBackgroundDuringPresentation = false,
                WeakSearchResultsUpdater = this
            };



            SearchController.SearchBar.BarTintColor = UIColor.FromRGB(0, 150, 255);
            SearchController.SearchBar.TintColor = UIColor.White;

            //Console.WriteLine(this.NavigationController.NavigationBar.BarTintColor);

            this.TableView.TableHeaderView = SearchController.SearchBar;

            Console.WriteLine("Iniciando App");
            GetTwitterFeeds();
            //Console.WriteLine("Tweets Count " + tweetList.Count);
        }

        #endregion


        #region UITableView DataSource
        [Export("numberOfSectionsInTableView:")]
        public override nint NumberOfSections(UITableView tableView)
        {
            return 1;
        }

        public override nint RowsInSection(UITableView tableView, nint section)
        {            
            return lstTweets.Count;
        }

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell(CustomTableViewCell.Key, indexPath) as CustomTableViewCell;

            string nombre = lstTweets[indexPath.Row].NombreUsr;
            string usuario = lstTweets[indexPath.Row].Usr + "\n";
            string mensaje = lstTweets[indexPath.Row].Mensaje;

            //Contenido del tweet
            cell.TextLabel.LineBreakMode = UILineBreakMode.WordWrap;
            cell.TextLabel.Lines = 0;
            cell.TextLabel.Text = $"{nombre}   @{usuario}{mensaje}";


            //cell.SomeText = lstTweets[indexPath.Row].Mensaje;
            //Foto de perfil
            //cell.ProfileImage = UIImageFromUrl(lstTweets[indexPath.Row].Foto);
            cell.ImageView.Image = UIImageFromUrl(lstTweets[indexPath.Row].Foto);

            //cell.IndexPath = indexPath;


            return cell;
        }
        #endregion

        #region Twitter Interactions

        async Task GetTwitterFeeds()
        {
            var auth = getTwitterKeys();

            var twitterCtx = new TwitterContext(auth);

            await BuscarTweets(twitterCtx);
        }

        async Task BuscarTweets(TwitterContext twitterCtx)
        {
            //List<Status> tweets =
            //    await
            //    (from tweet in twitterCtx.Status
            //     where tweet.Type == StatusType.User &&
            //           tweet.ScreenName == "JoeMayo"
            //     select tweet)
            //    .ToListAsync();

            const int MaxTweetsToReturn = 15;
            //const int MaxTotalResults = 10;

            // oldest id you already have for this search term
            ulong sinceID = 1;

            // used after the first query to track current session
            //ulong maxID;

            var combinedSearchResults = new List<Status>();

            List<Status> tweets =
                await
                (from tweet in twitterCtx.Status
                 where tweet.Type == StatusType.User &&
                       tweet.ScreenName == "gissellekuri" &&
                       tweet.Count == MaxTweetsToReturn &&
                       tweet.SinceID == sinceID &&
                       tweet.TweetMode == TweetMode.Extended
                 select tweet)
                .ToListAsync();



            //List<Status> tweets =
            //await
            //(from search in twitterCtx.Search
            // where search.Type == SearchType.Search &&
            //       search.Query == "Barcelona" &&
            //       search.Count == MaxTweetsToReturn &&
            //       search.SinceID == sinceID &&
            //       search.TweetMode == TweetMode.Extended
            // select search.Statuses)
            //.SingleOrDefaultAsync();

            if (tweets != null)
            {
                //combinedSearchResults.AddRange(tweets);
                //ulong previousMaxID = ulong.MaxValue;
                //do
                //{
                //    // one less than the newest id you've just queried
                //    maxID = tweets.Min(status => status.StatusID) - 1;

                //    //Debug.Assert(maxID < previousMaxID);
                //    previousMaxID = maxID;

                //    tweets =
                //        await
                //        (from tweet in twitterCtx.Status
                //         where tweet.Type == StatusType.User &&

                //               tweet.Count == MaxTweetsToReturn &&
                //               tweet.MaxID == maxID &&
                //               tweet.SinceID == sinceID &&
                //               tweet.TweetMode == TweetMode.Extended
                //         select tweet)
                //        .ToListAsync();

                //    combinedSearchResults.AddRange(tweets);

                //} while (tweets.Any() && combinedSearchResults.Count < MaxTotalResults);



                Console.WriteLine("Se encontraron " + tweets.Count);

                foreach (var item in tweets)
                {
                    //Console.WriteLine(item.FullText);
                    Console.WriteLine("Nuevo tweet");
                    Tweet t = new Tweet(item.User.Name, item.User.ScreenNameResponse, item.User.ProfileImageUrlHttps, item.FullText, item.RetweetCount, (int)item.FavoriteCount);
                    AgregarTweet(t);
                }

                TableView.ReloadData();

            }
            else
            {
                Console.WriteLine("No se econtraron Tweets.");
                Alerta("No se encontraron Tweets");
            }
        }

        async Task GetTwitterFeedsBySearch(string query)
        {
            var auth = getTwitterKeys();

            var twitterCtx = new TwitterContext(auth);

            await SearchTweetsViaController(twitterCtx, query);
        }

        SingleUserAuthorizer getTwitterKeys()
        {

            var auth = new SingleUserAuthorizer
            {
                CredentialStore = new InMemoryCredentialStore()
                {

                    ConsumerKey = "*****",
                    ConsumerSecret = "***",
                    OAuthToken = "*****-******",
                    OAuthTokenSecret = "*******"

                }
            };

            return auth;


        }

        async Task SearchTweetsViaController(TwitterContext twitterCtx, string query)
        {

            const int MaxTweetsToReturn = 15;
            ulong sinceID = 1;

            List<Status> tweets =
            await
            (from search in twitterCtx.Search
             where search.Type == SearchType.Search &&
                   search.Query == query &&
                   search.Count == MaxTweetsToReturn &&
                   search.SinceID == sinceID &&
                   search.TweetMode == TweetMode.Extended
             select search.Statuses)
            .SingleOrDefaultAsync();

            if (tweets != null)
            {
                Console.WriteLine("Tweets encontrados: " + tweets.Count);

                lstTweets = null;
                lstTweets = new List<Tweet>();

                foreach (var item in tweets)
                {
                    Console.WriteLine("Tweet insertado");
                    Tweet t = new Tweet(item.User.Name, item.User.ScreenNameResponse, item.User.ProfileImageUrlHttps, item.FullText, item.RetweetCount, (int)item.FavoriteCount);
                    AgregarTweet(t);
                }

                TableView.ReloadData();

            }
            else
            {
                Console.WriteLine("No se econtraron Tweets.");
                Alerta("No se encontraron Tweets");
            }
        }

        void AgregarTweet(Tweet t)
        {
            lstTweets.Add(t);
        }

        #endregion

        #region helpers

        public static UIImage UIImageFromUrl(string uri)
        {
            using (NSUrl url = new NSUrl(uri))
            using (var data = NSData.FromUrl(url))
                return UIImage.LoadFromData(data);
        }

        public void Alerta(string mensaje)
        {
            //Create Alert
            var okAlertController = UIAlertController.Create("Alerta", mensaje, UIAlertControllerStyle.Alert);

            //Add Action
            okAlertController.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));

            // Present Alert
            PresentViewController(okAlertController, true, null);
        }

        #endregion

        #region Search Controller

        //OnKeyUp del searchController

        [Export("updateSearchResultsForSearchController:")]
        public virtual void UpdateSearchResultsForSearchController(UISearchController searchController)
        {
            GetTwitterFeedsBySearch(searchController.SearchBar.Text);


            //Console.WriteLine(searchController.SearchBar.Text);
        }

        #endregion
    }
}
